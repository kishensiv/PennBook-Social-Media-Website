<!DOCTYPE html>
<html>
<head>
  <title>Chat</title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@200&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <link rel="stylesheet"
  href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style type="text/css">
  body {
    height: 100%;
  }

  html {
      height: 100%;
  }

  .left{
    height: 100%;
    width: 25%;
    /* background-color:rgb(54, 52, 52); */
    background-color:#4185eb;
    height : 100%;
    color : white
  }

  .right{
    height: 100%;
    width: 50%;
    background-color:#4185eb; /*rgb(61, 58, 58);*/
    height : 100%;
    color : white;
  }


  .card {
    padding-top: 0;
    height: 87%;
    background-color: rgb(220, 239, 247);
  }

  .form-control {
      background-color: white;
      color: black;
      border-color: black;
      height:4%;
      max-width: 95%;
  }

  .panel {
    height : 5%;
    background-color: #4185eb;
  }

  .right-bubble {
    padding-left: 2%;
    width : 40%;
    height: 20%;
    background-color: #4185eb;
    color: rgb(125, 188, 230);
    font-size: 120%;
    content: left;

  }

  .flex {
    display: flex;
    flex-direction: row;
  }

  .r {
    color: rgb(77, 77, 248);
  }
  #messages { list-style-type: none; margin: 0; padding: 0; }
  #messages > li { padding: 0.5rem 1rem; }
  #username { list-style-type: none; margin: 0; padding: 0; }
  #username > li { padding: 0.5rem 1rem; }

  #messages > li:nth-child(odd) { background: rgb(103, 154, 212) }

  .nav-ul {
    width: 25%;
    padding:0;
    background-color: #d7dae0;
    color: black;
    position: fixed;
    height: 100%;
    list-style-type: none;
  }
  li a {
    display: block;
    text-decoration: none;
    color: black;
    padding: 20px 20px;
    margin-bottom: 10px;
    margin-top: 10px;
  }

  li a.active {
    background-color: #6c80db;
  }

  li a:hover:not(.active) {
    background-color: rgb(214, 214, 214);
  }


</style>

</head>

<body>
  <div class="nav-ul">

  <ul style="list-style-type: none;">
    <li class="nav-item disabled">
      <a class="nav-link" style="color:black" href="/feed">
        <i class="glyphicon glyphicon-globe icon-blue"></i><span> Feed</span>
      </a>
    </li>
    <li class="nav-item">
      <a id="wall-nav-bar" style="color:black" class="nav-link" href="/wall">
        <i class="glyphicon glyphicon-user icon-blue"></i><span>  Wall</span>
      </a>
    </li>
    <li class="nav-item">

      <a class="nav-link" style="color:black" href="/chat">
        <i class="glyphicon glyphicon-comment icon-blue"></i><span>  Chat</span>
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" style="color:black" href="/visualizer">
        <i class="glyphicon glyphicon-stats icon-blue"></i><span>  Visualizer</span></a>
    </li>
    <li class="nav-item">
      <a class="nav-link" style="color:black" href="/settings">
        <i class="glyphicon glyphicon-cog icon-blue"></i><span>  Settings</span>
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" style="color:black" href="/search">
        <i class="glyphicon glyphicon-search icon-blue"></i><span>  Search</span>
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" style="color:black" href="/newsfeed">
        <i class="glyphicon glyphicon-list icon-blue"></i><span>  News</span>
      </a>
    </li>
    <li class="nav-item">
      <a class="nav-link" style="color:black" href="/searchnews">
        <i class="glyphicon glyphicon-search icon-blue"></i><span>  Search News</span>
      </a>
  </li>
  <li class="nav-item active">
    <a class="nav-link" style="color:black" href="/signout">
      <i class="glyphicon glyphicon-off icon-blue"></i><span>  Sign Out</span>
    </a>
  </li>
  </ul>
</div>

  <!-- <div class="left"> -->
    <div class="col-lg-6 col-sm-12 left" style="margin-left:25%">
    <h3 id = "username">

    </h3>
    <form id="roomForm" action="" class="flex">
      <input id = "inputRoom" autocomplete="off" type="text" class = "form-control" placeholder="Add a new chat room..."> </br>
      <button type="button" class="btn btn-sm btn-secondary btn-lg">Create</button>
    </form>
    <form id="inviteForm" action="" class="flex">
      <input id = "inviteFormInput" autocomplete="off" type="text" class = "form-control" placeholder="Invite someone to this chat..."> </br>
      <button type="button" class="btn btn-sm btn-secondary btn-lg">Invite</button>
    </form>
    Chats
    <ul class = "roomList" id = "rooms">

    </ul>
    Chat Invites
    <ul class = "inviteList" id = "invites">

    </ul>
  </div>

  <div id = "chat-right" class="col-lg-6 col-sm-12 right">
    <!-- <div id = "chat-right" class="col-lg-6 col-sm-3 right"> -->
    <div class = "panel">
    </div>
    <div class = "card">
        <div class = "card-body">
          <ul class = "mesList" id = "messages">

          </ul>



        </div>
    </div>
    <form id="form" action="" class="flex">
      <input id = "input" autocomplete="off" type="text" class = "form-control" placeholder="Type a message..."> </br>
      <input type="submit" class="btn btn-sm btn-secondary btn-lg" value="Send" />
    </form>
  </div>



<script src="/socket.io/socket.io.js" type="text/javascript"></script>
<script>

  var socket = io();

  //change the socket io stock code
  var messages = document.getElementById('messages');
  var form = document.getElementById('form');
  var input = document.getElementById('input');
  var rooms = document.getElementById('rooms');
  var roomForm = document.getElementById('roomForm');
  var roomFormInput = document.getElementById('inputRoom');
  var inviteForm = document.getElementById('inviteForm');
  var inviteFormInput = document.getElementById('inviteFormInput');
  var invites = document.getElementById('invites');
  var user = document.getElementById('username');
  var messageList = []
  var roomList = []
  var inviteList = []
  var currentRoom
  var person;

  socket.on('init', function(msg){
    var item = document.createElement('li');
    item.innerHTML = msg
    user.appendChild(item);
    person = msg
  })

  socket.on("Error", arg =>{
    alert(arg)
  })

  socket.on('chat message', function(msg) {
    var item = document.createElement('li');
    item.textContent = "(" + msg.sender + ") :" + msg.message;
    item.className = "r";
    messages.appendChild(item);
    messageList.push(item)
    window.scrollTo(0, document.body.scrollHeight);
  });

  socket.on('prev_messages', function(msg) {
    messages.innerHTML = "";
    rooms.innerHTML = "";
    messageList = [];
    roomList = [];


    if (msg[0] != null) {

      msg[0].Items.sort((x, y) => y.timestamp - x.timestamp);

      msg[0].Items.forEach(x => {
      var item = document.createElement('li');
      if(x.author.S == msg[1].user) {
        item.className = "r";
      }
      item.textContent = "(" + x.author.S + ") :" + x.message.S;
      messages.appendChild(item);
      messageList.push(item)
      window.scrollTo(0, document.body.scrollHeight);
    })
    }


    msg[1].rooms.forEach( x => {
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'_R" action="" class="flex"><input id="roomBtn" type="button" class="flex btn btn-outline-primary" value='+ x.S + ' onclick= changeRoom("' +x.S+ '") /> <input id = "'+x.S+'_RV" class = "form-control" placeholder="Type Leave to leave."></form>'
      rooms.appendChild(item);
      roomList.push(x.S);

      var roomId = document.getElementById(x.S+"_R");
      var roomIdVal = document.getElementById(x.S+"_RV");

      roomId.addEventListener('submit', function(e) {
        e.preventDefault();

        if(roomIdVal.value) {
            if (roomIdVal.value == "Leave") {
              var send = {
              message : x.S,
              room : currentRoom
            }

            var index = roomList.indexOf(x.S);
            if (index == 0) {
              roomList.shift()
            } else {
              roomList = roomList.splice(index-1,1);
            }

            //roomId.parentNode.removeChild(roomId);
            var send = {
              message : x.S,
            }
            socket.emit("deleteRoom", send)

            //what if leaving current room?
            //socket.emit('refresh', currentRoom);
            //socket.emit("reload", "r")

          }
        }

      });


    })

    currentRoom = msg[1].currentRoom;
    console.log(currentRoom);

    if(typeof(currentRoom) != "string") {
      if(currentRoom != null) {
        currentRoom = null;
      }
    }

    console.log("Loading room with current room of: " + currentRoom)

    msg[1].invites.forEach(x=> {
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'" action="" class="flex">'+x.S+'<input id = "'+x.S+'_" class = "form-control" placeholder="Yes to accept, No to decline."></form>'

      invites.appendChild(item);
      inviteList.push(x.S);

      var invId = document.getElementById(x.S);
      var invIdValue = document.getElementById(x.S+"_");


      invId.addEventListener('submit', function(e) {
        e.preventDefault();


        if(invIdValue.value) {
            if (invIdValue.value == "Yes") {


            var send = {
              message : x.S,
              room : currentRoom
            }
            //socket.emit("sendInvite", send);
            invId.parentNode.removeChild(invId);
            socket.emit('addRoom', send);
            //socket.emit("deleteInvite", send);



            //var index = inviteList.indexOf(item);
            //inviteList.splice(index,1);


          } else {

            //var index = inviteList.indexOf(item);
            //inviteList.splice(index,1);
            invId.parentNode.removeChild(invId);

            var send = {
              message : x.S,
              room : currentRoom
            }

            socket.emit("deleteInvite", send);

          }
      }

    });

    })

    console.log(inviteList);



  });

  socket.on('chang', function(msg) {
    console.log("receive chang")
    messages.innerHTML = "";
    currentRoom = msg[1].currentRoom;

    if (msg[0] != null) {

      msg[0].Items.sort((x, y) => y.timestamp - x.timestamp);

      msg[0].Items.forEach(x => {
      var item = document.createElement('li');
      if(x.author.S == msg[1].user) {
        item.className = "r";
      }
      item.textContent = "(" + x.author.S + ") :" + x.message.S;
      messages.appendChild(item);
      messageList.push(item)
      window.scrollTo(0, document.body.scrollHeight);
      })
}

  })

  socket.on('refr', function(msg) {

    if (msg[0] != null) {

      msg[0].Items.sort((x, y) => y.timestamp - x.timestamp);

      msg[0].Items.forEach(x => {
        var newMessage = true;
        var item = document.createElement('li');
        if(x.author.S == msg[1].user) {
          item.className = "r";
        }
        item.textContent = "(" + x.author.S + ") :" + x.message.S;

        for (var i = 0; i < messageList.length; i++) {
          if(messageList[i].textContent == item.textContent && messageList[i].className == item.className) {
            newMessage = false;
          }
        }
        if (newMessage) {
          messages.appendChild(item);
          messageList.push(item);
        }
        newMessage = true;
      })
    }




    msg[1].rooms.forEach( x => {
      var newRoom = true;
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'_R" action="" class="flex"><input id="roomBtn" type="button" class="flex btn btn-outline-primary" value='+ x.S + ' onclick= changeRoom("' +x.S+ '") /> <input id = "'+x.S+'_RV" class = "form-control" placeholder="Type Leave to leave."></form>'

      for (var i = 0; i < roomList.length; i++) {
        if(roomList[i] == x.S) {
          newRoom = false;
        }
      }

      if (newRoom) {
        rooms.appendChild(item);
        roomList.push(x.S);
      }
      newRoom = false;

      var roomId = document.getElementById(x.S+"_R");
      var roomIdVal = document.getElementById(x.S+"_RV");

      roomId.addEventListener('submit', function(e) {
        e.preventDefault();

        if(roomIdVal.value) {
            if (roomIdVal.value == "Leave") {

            var send = {
              message : x.S,
              room : currentRoom
            }
            var index = roomList.indexOf(x.S);
            if (index == 0) {
              roomList.shift()
            } else {
              roomList = roomList.splice(index-1,1);
            }
            var send = {
              message : x.S,
            }
            socket.emit("deleteRoom", send)

          }
        }

      });


    })

    currentRoom = msg[1].currentRoom;
    if(typeof(currentRoom) != "string") {
      if(currentRoom != null) {
        currentRoom = null;
      }
    }

    console.log("Refreshed and new current room is: " + currentRoom)

    msg[1].invites.forEach(x=> {
      var newInvite = true;
      var item = document.createElement('li');
      item.innerHTML += '<form id="'+ x.S +'" action="" class="flex">'+x.S+'<input id = "'+x.S+'_" class = "form-control" placeholder="Yes to accept, No to decline."></form>'


      for (var i = 0; i < inviteList.length; i++) {
        if(inviteList[i] == x.S) {
          console.log("false")
          newInvite = false;
        }
      }

      if (newInvite) {
        console.log(inviteList);
        console.log(x.S)
        invites.appendChild(item);
        inviteList.push(x.S);
      }

      newInvite = false;

      var invId = document.getElementById(x.S);
      var invIdValue = document.getElementById(x.S+"_");


      invId.addEventListener('submit', function(e) {
        e.preventDefault();


        if(invIdValue.value) {
            if (invIdValue.value == "Yes") {

            var send = {
              message : x.S,
              room : currentRoom
            }
            invId.parentNode.removeChild(invId);
            socket.emit('addRoom', send);
            //socket.emit("deleteInvite", send);
            //socket.emit('refresh', currentRoom);
            //var index = inviteList.indexOf(item);
            //inviteList.splice(index,1);


          } else {

            var send = {
              message : x.S,
              room : currentRoom
            }

            socket.emit("deleteInvite", send);
            invId.parentNode.removeChild(invId);

          }
      }

    });

    })

  });


  form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (input.value) {

      var send = {
        message : input.value,
        room : currentRoom,
        sender : person
      }
      socket.emit('test', send);
      input.value = '';
    }
  });

  function changeRoom(e) {

    if (e != currentRoom) {
      socket.emit("change room", e)
    }

  }

  roomForm.addEventListener('submit', function(e) {
    e.preventDefault();
    if (inputRoom.value) {

      var send = {
        message : inputRoom.value,
        room : currentRoom
      }
      socket.emit("sendInvite", send);
      socket.emit('refresh', currentRoom);
      //socket.emit('addRoom', send);
      inputRoom.value = '';
    }
  });

  inviteForm.addEventListener('submit', function(e) {
    e.preventDefault();
    if (inviteFormInput.value) {

      var send = {
        message : inviteFormInput.value,
        room : currentRoom
      }
      socket.emit("sendGroupInvite", send);
      socket.emit('refresh', currentRoom);
      //socket.emit('addRoom', send);
      inviteFormInput.value = '';
    }
  });


  setInterval(function() {


    if (currentRoom == undefined) {
      currentRoom = null;
    }
    if(typeof(currentRoom) != "string") {
      if(currentRoom != null) {
        currentRoom = null;
      }
    }

    console.log("Refreshing with current room of "+ currentRoom);
    socket.emit('refresh', currentRoom);


  }, 3000);


  $(document).ready(function() {$("#wall-nav-bar").attr("href", "/wall?username=<%= username %>");});

</script>

</body>
</html>
